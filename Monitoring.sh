#!/bin/bash

# === –õ–æ–≥-—Ñ–∞–π–ª ===
LOG_FILE="/var/log/monitoring.log"
LAST_CLEAR_FILE="/tmp/last_log_clear"  # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏

# === –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
log() {
    local message="$1"
    echo "[$(date)] $message" | tee -a "$LOG_FILE"
}

# === –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ ===
clear_log_daily() {
    local now
    now=$(date +%s)

    if [[ -f "$LAST_CLEAR_FILE" ]]; then
        local last_clear
        last_clear=$(cat "$LAST_CLEAR_FILE")
    else
        local last_clear=0
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ (86400 —Å–µ–∫—É–Ω–¥) —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—á–∏—Å—Ç–∫–∏
    if (( now - last_clear >= 86400 )); then
        log "üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞ $LOG_FILE..."
        > "$LOG_FILE"
        echo "$now" > "$LAST_CLEAR_FILE"
        log "‚úÖ –õ–æ–≥-—Ñ–∞–π–ª –æ—á–∏—â–µ–Ω."
    fi
}

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ tmux-—Å–µ—Å—Å–∏–∏ Pipe ===
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Pipe..."
check_and_create_tmux_session_Pipe() {
    if ! tmux has-session -t Pipe 2>/dev/null; then
        log "‚ö†Ô∏è–°–µ—Å—Å–∏—è tmux 'pipe –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é..."
        tmux new-session -d -s pipe './pop'
        log "‚úÖ–°–µ—Å—Å–∏—è tmux 'pipe' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞."
    else
        log "‚úÖ–°–µ—Å—Å–∏—è tmux 'pipe' —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."
    fi
}

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ tmux-—Å–µ—Å—Å–∏–∏ dria ===
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ dria..."
check_and_create_tmux_session_dria() {
    if ! tmux has-session -t dria 2>/dev/null; then
        log "‚ö†Ô∏è–°–µ—Å—Å–∏—è tmux 'dria –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é..."
        tmux new-session -d -s dria "dkn-compute-launcher start; bash"
        log "‚úÖ–°–µ—Å—Å–∏—è tmux 'dria' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞."
    else
        log "‚úÖ–°–µ—Å—Å–∏—è tmux 'dria' —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç."
    fi
}


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ multiple-node ===
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Multiple..."
check_multiple_status() {
    cd ~/multipleforlinux || { log "‚ùå–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ ~/multipleforlinux"; return; }

    local status_output
    status_output=$(timeout 60s ./multiple-cli status)

    if [[ $? -eq 124 ]]; then
        log "‚ùå–û—à–∏–±–∫–∞: multiple-cli status –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 60 —Å–µ–∫."
        return
    fi

    if [[ $status_output != *"Node Statistical"* ]]; then
        log "‚ö†Ô∏èmultiple-node –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é..."
        nohup ./multiple-node > output.log 2>&1 &
        log "‚úÖmultiple-node –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω."
    else
        log "‚úÖmultiple-node —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
    fi
}

# === –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—Å–∫ Docker –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ===
check_docker_containers() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker-–¥–µ–º–æ–Ω–∞..."
    
    if ! systemctl is-active --quiet docker; then
        log "‚ö†Ô∏è Docker-–¥–µ–º–æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ó–∞–ø—É—Å–∫–∞—é..."
        systemctl start docker
        sleep 5  # –î–∞–µ–º Docker –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        if ! systemctl is-active --quiet docker; then
            log "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker-–¥–µ–º–æ–Ω!"
            return
        fi
        log "‚úÖ Docker-–¥–µ–º–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω."
    fi

    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    local non_up_containers
    non_up_containers=$(docker ps -a --filter "status=exited" --filter "status=created" --filter "status=paused" --format "{{.ID}} {{.Names}}")

    if [[ -n "$non_up_containers" ]]; then
        log "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
        echo "$non_up_containers" | awk '{print $2}' | tee -a "$LOG_FILE"

        while IFS= read -r container; do
            local container_id container_name
            container_id=$(echo "$container" | awk '{print $1}')
            container_name=$(echo "$container" | awk '{print $2}')
            log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: $container_name..."
            docker restart "$container_id" >> "$LOG_FILE" 2>&1
            log "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä '$container_name' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."
        done <<< "$non_up_containers"
    else
        log "‚úÖ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç."
    fi
}

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö systemd-—Å–µ—Ä–≤–∏—Å–æ–≤ ===
check_services() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ systemd-—Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    local services
    services=$(systemctl list-units --type=service --state=failed --no-pager --no-legend | awk '{print $1}' | grep -v '^‚óè')

    if [[ -z "$services" ]]; then
        log "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ."
        return
    fi

    log "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    log "$services"

    while read -r service; do
        [[ -z "$service" ]] && continue
        log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞: $service..."
        systemctl restart "$service" >> "$LOG_FILE" 2>&1

        local new_status
        new_status=$(systemctl is-active "$service")
        if [[ "$new_status" == "active" ]]; then
            log "‚úÖ –°–µ—Ä–≤–∏—Å '$service' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."
        else
            log "‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å '$service' –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å (–Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: $new_status)."
        fi
    done <<< "$services"
}

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
while true; do
    log "üü¢ –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏..."
    
    clear_log_daily
    check_and_create_tmux_session_Pipe
    check_and_create_tmux_session_dria
    check_multiple_status
    check_docker_containers
    check_services

    log "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π..."
    sleep 250
done
